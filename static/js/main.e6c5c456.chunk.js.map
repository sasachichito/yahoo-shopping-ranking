{"version":3,"sources":["components/Ranking.js","actions/Ranking.js","containers/Ranking.js","components/Nav.js","actions/Nav.js","containers/Nav.js","App.js","reducers/shopping.js","reducers/Ranking.js","reducers/index.js","serviceWorker.js","index.js","createStore.js"],"names":["Ranking","this","props","onMount","categoryId","nextProps","onUpdate","category","ranking","error","name","map","item","i","Card","key","code","style","display","maxWidth","margin","CardMedia","image","imageUrl","title","height","CardContent","Typography","textOverflow","whiteSpace","overflow","CardActions","Button","raised","color","fullWidth","href","url","React","Component","defaultProps","startRequest","type","payload","receiveData","response","finishRequest","fetchRanking","dispath","getState","a","categories","shopping","find","id","replace","queryString","qs","stringify","appid","category_id","fetchJsonp","json","data","connect","state","ownProps","dispatch","actions","Nav","fetchCategories","onClick","Drawer","variant","List","width","ListItem","button","to","ListItemText","primary","categoriesResponse","path","push","App","className","paddingLeft","CssBaseline","AppBar","left","Toolbar","marginTop","padding","exact","component","render","match","params","getCategories","categoryArray","allCategory","ResultSet","Result","Categories","Children","Object","keys","Id","Title","Medium","initialState","action","getRanking","itemLength","totalResultsReturned","index","Code","Name","Url","Image","undefined","history","combineReducers","router","connectRouter","Boolean","window","location","hostname","createHistory","store","reduxCreateStore","createRootReducer","applyMiddleware","logger","thunk","routerMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6c5c456.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\n\nexport default class Ranking extends React.Component {\n    componentWillMount() {\n        this.props.onMount(this.props.categoryId);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if(this.props.categoryId !== nextProps.categoryId) {\n            this.props.onUpdate(nextProps.categoryId);\n        }\n    }\n\n    render() {\n        const { category, ranking, error } = this.props;\n\n        return (\n            <div>\n                <h2>{\n                    typeof category !== 'undefined'\n                    ? `${category.name}のランキング`\n                    : ''\n                }</h2>\n\n                {(() => {\n                    if (error) {\n                        return <p>エラーが発生しました。リロードして下さい。</p>\n                    } else if (typeof ranking === 'undefined') {\n                        return <p>読み込み中...</p>\n                    } else {\n                        return ranking.map((item, i) => (\n                            <Card\n                              key={`ranking-item-${item.code}`}\n                              style={{ display: 'inline-block', maxWidth: '220px', margin: '32px'}}\n                            >\n                                <CardMedia\n                                  image={item.imageUrl}\n                                  title={`${i + 1}位 ${item.name}`}\n                                  style={{ height: '220px'}}\n                                />\n                                <CardContent>\n                                    <Typography style={{ textOverflow: \"ellipsis\", whiteSpace: \"nowrap\", overflow: \"hidden\" }}>\n                                        {`${i + 1}位　${item.name}`}\n                                    </Typography>\n                                </CardContent>\n                                <CardActions>\n                                    <Button\n                                      raised\n                                      color=\"secondary\"\n                                      fullWidth\n                                      href={item.url}\n                                    >商品ページ</Button>\n                                </CardActions>\n                            </Card>\n                        ))\n                    }\n                })()}\n            </div>\n        )\n    }\n}\n\nRanking.propTypes = {\n    categoryId: PropTypes.string,\n    category: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired\n    }),\n    ranking: PropTypes.arrayOf(\n        PropTypes.shape({\n            code: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            url: PropTypes.string.isRequired,\n            imageUrl: PropTypes.string.isRequired,\n        })\n    ),\n    error: PropTypes.bool.isRequired,\n    onMount: PropTypes.func.isRequired,\n    onUpdate: PropTypes.func.isRequired\n};\n\nRanking.defaultProps = {\n    categoryId: '1'\n};","import fetchJsonp from 'fetch-jsonp';\nimport qs from'qs';\nimport { replace } from 'react-router-redux';\n\nconst API_URL = 'https://shopping.yahooapis.jp/ShoppingWebService/V1/json/categoryRanking';\nconst APP_ID = 'dj00aiZpPVZLYVoyQzVmT1BIbyZzPWNvbnN1bWVyc2VjcmV0Jng9YWY-';\n\nconst startRequest = category => ({\n    type: 'START_REQUEST',\n    payload: { category }\n});\n\nconst receiveData = (category, error, response) => ({\n    type: 'RECEIVE_DATA',\n    payload: { category, error, response }\n});\n\nconst finishRequest = category => ({\n    type: 'FINISH_REQUEST',\n    payload: { category }\n});\n\nexport const fetchRanking = categoryId => {\n    return async (dispath, getState) => {\n        const categories = getState().shopping.categories;\n        const category = categories.find(category => (category.id === categoryId));\n        if (typeof category === 'undefined') {\n            dispath(replace('/'));\n            return;\n        }\n\n        dispath(startRequest(category));\n        const queryString = qs.stringify({\n            appid: APP_ID,\n            category_id: categoryId\n        });\n\n        try {\n            const response = await fetchJsonp(`${API_URL}?${queryString}`);\n            const data = await response.json();\n            dispath(receiveData(category, null, data));\n        } catch (err) {\n            dispath(receiveData(category, err));\n        }\n        dispath(finishRequest(category));\n    };\n};","import { connect } from 'react-redux';\nimport Ranking from '../components/Ranking';\nimport * as actions from '../actions/Ranking';\n\nconst mapStateToProps = (state, ownProps) => ({\n    categoryId: ownProps.categoryId,\n    category: state.Ranking.category,\n    ranking: state.Ranking.ranking,\n    error: state.Ranking.error\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onMount(categoryId) {\n        dispatch(actions.fetchRanking(categoryId));\n    },\n    onUpdate(categoryId) {\n        dispatch(actions.fetchRanking(categoryId));\n    }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Ranking);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nexport default class Nav extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.props.fetchCategories();\n    }\n\n    render() {\n        const { categories, onClick, error } = this.props;\n        const to = category => (\n            category.id === '1'\n              ? '/all'\n              : `/category/${category.id}`\n        );\n        \n        return (\n            <div>\n                {(() => {\n                    if (error) {\n                        return <p>エラーが発生しました。リロードして下さい。</p>\n                    } else if (typeof categories === 'undefined') {\n                        return <p>読み込み中...</p>\n                    } else {\n                        return <Drawer variant=\"permanent\" >\n                            <List style={{ width: 240}}>\n                                {categories.map(category => (\n                                    <ListItem\n                                    button \n                                    key={`menu-item-${category.id}`}\n                                    onClick={() => onClick(to(category))}\n                                    >\n                                        <ListItemText primary={category.name} />\n                                    </ListItem>\n                                ))}\n                            </List>\n                        </Drawer>\n                    }\n                })()}\n            </div>\n        )\n    }\n}\n\nNav.propTypes = {\n    categories: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired\n        })\n    ).isRequired,\n    onClick: PropTypes.func.isRequired\n};\n","import fetchJsonp from 'fetch-jsonp';\nimport qs from'qs';\n\nconst API_URL = 'https://shopping.yahooapis.jp/ShoppingWebService/V1/json/categorySearch';\nconst APP_ID = 'dj00aiZpPVZLYVoyQzVmT1BIbyZzPWNvbnN1bWVyc2VjcmV0Jng9YWY-';\n\nconst receiveData = (categoriesResponse, error) => ({\n    type: 'RECEIVE_CATEGORIES',\n    payload: { categoriesResponse, error }\n})\n\nexport const fetchCategories = () => {\n    return async (dispath) => {\n\n        const queryString = qs.stringify({\n            appid: APP_ID,\n            category_id: '1'\n        });\n\n        try {\n            const response = await fetchJsonp(`${API_URL}?${queryString}`);\n            const categoriesResponse = await response.json();\n            dispath(receiveData(categoriesResponse, null));\n        } catch (err) {\n            dispath(receiveData(null, err));\n        }\n    };\n};","import { connect } from 'react-redux';\nimport { push } from 'react-router-redux';\nimport Nav from '../components/Nav';\nimport * as actions from '../actions/Nav';\n\nconst mapStateToProps = state => ({\n    categories: state.shopping.categories\n})\n\nconst mapDispatchToProps = dispatch => ({\n    onClick (path) {\n        dispatch(push(path));\n    },\n    fetchCategories () {\n        dispatch(actions.fetchCategories());\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Nav);","import React from 'react';\nimport './App.css';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport Ranking from './containers/Ranking';\nimport Nav from './containers/Nav';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{ paddingLeft: 240 }}>\n      <CssBaseline />\n\n      <AppBar style={{ left: 240 }}>\n        <Toolbar>\n          <Typography type=\"title\" color=\"inherit\">\n            Yahoo!ショッピングランキング\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Nav />\n\n      <div style={{ marginTop: 64, padding: 32 }}>\n        <Switch>\n          <Route exact path=\"/\" component={Ranking} />\n          <Route path=\"/all\" component={Ranking} />\n          <Route\n            path=\"/category/1\"\n            render={() => <Redirect to=\"/all\" />}\n          />\n          <Route\n            path=\"/category/:id\"\n            render={\n              ({ match }) => <Ranking categoryId={match.params.id} />\n            }\n          />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const getCategories = categoriesResponse => {\n    const categoryArray = [{\n        id: '1',\n        name: 'すべてのカテゴリ'\n    }];\n\n    const allCategory = categoriesResponse.ResultSet['0'].Result.Categories.Children;\n    \n    for (let key in Object.keys(allCategory)) {\n        if (typeof allCategory[key] === 'undefined') {\n            continue;\n        }\n        categoryArray.push({\n            id: allCategory[key].Id,\n            name: allCategory[key].Title.Medium\n        });\n    };\n    return categoryArray;\n};\n\nconst initialState = {\n    categories: [{\n        id: '1',\n        name: 'すべてのカテゴリ'\n    }]\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case 'RECEIVE_CATEGORIES':\n            return action.payload.error\n                ? { ...state, error: true}\n                : { ...state,\n                    categories : getCategories(action.payload.categoriesResponse)\n                };\n        default:\n            return state;\n    }\n}","const getRanking = response => {\n    const ranking = [];\n    const itemLength = response.ResultSet.totalResultsReturned;\n    for (let index = 0; index < itemLength; index++) {\n        const item = response.ResultSet['0'].Result[index + ''];\n        ranking.push({\n            code: item.Code,\n            name: item.Name,\n            url: item.Url,\n            imageUrl: item.Image.Medium\n        })\n    }\n    return ranking;\n}\n\nconst initialState = {\n    category: undefined,\n    ranking: undefined,\n    error: false\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case 'START_REQUEST':\n            return {\n                category: action.payload.category,\n                ranking: undefined,\n                error: false\n            };\n        case 'RECEIVE_DATA':\n            return action.payload.error\n                ? { ...state, error: true}\n                : { ...state,\n                    ranking: getRanking(action.payload.response)\n                };\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport shopping from './shopping';\nimport Ranking from './Ranking'\n\nexport default (history) => combineReducers({\n    router: connectRouter(history),\n    shopping,\n    Ranking\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\n//import createHistory from 'history/createBrowserHistory';\nimport createHistory from 'history/createHashHistory';\nimport App from './App';\nimport { ConnectedRouter } from 'connected-react-router';\nimport createStore from './createStore';\nimport * as serviceWorker from './serviceWorker';\n\nconst history = createHistory();\n\nconst store = createStore(history);\n\nReactDOM.render(\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <App />\n      </ConnectedRouter>\n    </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {\n    createStore as reduxCreateStore,\n    applyMiddleware\n  } from 'redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport { routerMiddleware } from 'connected-react-router';\nimport createRootReducer from './reducers';\n\nexport default function createStore(history) {\n    return reduxCreateStore(\n        createRootReducer(history),\n        applyMiddleware(\n            logger,\n            thunk,\n            routerMiddleware(history)\n        )\n    );\n}"],"sourceRoot":""}